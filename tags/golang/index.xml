<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on gzhh&#39;s blog</title>
    <link>https://blog.gzhh.tech/tags/golang/</link>
    <description>Recent content in Golang on gzhh&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 08 Feb 2023 16:00:00 +0800</lastBuildDate><atom:link href="https://blog.gzhh.tech/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用 Golang 实现 worker pool</title>
      <link>https://blog.gzhh.tech/posts/implement-worker-pool-with-golang/</link>
      <pubDate>Wed, 08 Feb 2023 16:00:00 +0800</pubDate>
      
      <guid>https://blog.gzhh.tech/posts/implement-worker-pool-with-golang/</guid>
      <description>介绍 Golang 中的 Channel 可以用来处理并发，下面我们就使用 Channel 来实现一个并发异步任务 worker pool。maxWorkers 是最大并发数，JobQueue 为待执行 job 队列。
实现 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;io&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;strconv&amp;#34; &amp;#34;time&amp;#34; ) func jobHandler(w http.ResponseWriter, req *http.Request) { id, _ := strconv.Atoi(req.URL.Query().Get(&amp;#34;id&amp;#34;)) // handle async logic job := Job{ Handle: jobRunHandler, ID: id, } JobQueue &amp;lt;- job io.WriteString(w, &amp;#34;do job ok!\n&amp;#34;) } func jobRunHandler(params HandleParams) { time.Sleep(time.Second * 3) fmt.Printf(&amp;#34;job %d executed \n\n&amp;#34;, params.ID) } func main() { // init worker pool Setup() http.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on gzhh&#39;s blog</title>
    <link>https://blog.gzhh.tech/posts/</link>
    <description>Recent content in Posts on gzhh&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 05 Nov 2023 16:10:00 +0800</lastBuildDate>
    <atom:link href="https://blog.gzhh.tech/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang time.Time 和 MySQL datetime 互转问题</title>
      <link>https://blog.gzhh.tech/posts/go-and-mysql-time/</link>
      <pubDate>Sun, 05 Nov 2023 16:10:00 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/go-and-mysql-time/</guid>
      <description>一、时间概念 时间标准 某个时间系统的时间标准又称时间基准，是定义如何测量时间的一种规范，具体包括测量时间间隔的尺度基准和定义起始时刻的参考基准。&#xA;UTC&#xA;https://en.wikipedia.org/wiki/Coordinated_Universal_Time 标准时间 标准时间是在同一时区内的不同地区，舍弃地区性的子午线定出的太阳时或地方平时，而共同采用的同步时间。&#xA;Time Zone&#xA;https://en.wikipedia.org/wiki/Time_zone https://en.wikipedia.org/wiki/Tz_database https://en.wikipedia.org/wiki/List_of_tz_database_time_zones 国际标准 ISO 8610 国际标准化组织的日期和时间的表示方法。&#xA;Date&#xA;2023-11-05 Time in UTC&#xA;06:50:41Z T065041Z Date and time in UTC&#xA;2023-11-05T06:50:41Z 20231105T065041Z Date and time with the offset&#xA;2023-11-04T23:50:41−07:00 UTC−07:00 2023-11-05T06:50:41+00:00 UTC+00:00 2023-11-05T13:50:41+07:00 UTC+07:00 Ref:&#xA;The T is just a literal to separate the date from the time, and the Z means &amp;ldquo;zero hour offset&amp;rdquo; also known as &amp;ldquo;Zulu time&amp;rdquo; (UTC). UTC GMT Time in China - CST Time in the United States 二、Time in Linux 查看所在时区的日期和时间</description>
    </item>
    <item>
      <title>Golang json unmarshal 大整数为浮点数问题</title>
      <link>https://blog.gzhh.tech/posts/golang-json-unmarshal-long-number/</link>
      <pubDate>Sun, 26 Mar 2023 13:00:00 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/golang-json-unmarshal-long-number/</guid>
      <description>问题介绍 在 Golang 中使用 json Unmarshal 将一个 json 解析为不确定的结构 interface{} 时候，会将数字的接收类型默认设置为 float64。&#xA;当原 json 结构中的整数太长，会导致转为 float64 超出精度，导致精度丢失。&#xA;例子 package main import ( &amp;#34;bytes&amp;#34; &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; ) var jsonstring = `{ &amp;#34;id&amp;#34;: 1130839459432311551, &amp;#34;id1&amp;#34;: 113083945943231, &amp;#34;id2&amp;#34;: 12344556, &amp;#34;create_time&amp;#34;: &amp;#34;2023-03-22 16:58:38&amp;#34;, &amp;#34;labels&amp;#34;: [] }` func f1() { var data interface{} err := json.Unmarshal([]byte(jsonstring), &amp;amp;data) if err != nil { panic(err) } fmt.Printf(&amp;#34;%+v\n&amp;#34;, data) dataBytes, err := json.Marshal(data) if err != nil { panic(err) } fmt.</description>
    </item>
    <item>
      <title>使用 Golang 实现 worker pool</title>
      <link>https://blog.gzhh.tech/posts/implement-worker-pool-with-golang/</link>
      <pubDate>Wed, 08 Feb 2023 16:00:00 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/implement-worker-pool-with-golang/</guid>
      <description>介绍 Golang 中的 Channel 可以用来处理并发，下面我们就使用 Channel 来实现一个并发异步任务 worker pool。&#xA;简单实现 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; ) var mq chan int64 func init() { mq = make(chan int64, 10) } func produce(i int64) { time.Sleep(time.Second) mq &amp;lt;- i } func consume() { for { i := &amp;lt;-mq time.Sleep(time.Second) fmt.Printf(&amp;#34;get i %d\n&amp;#34;, i) } } func main() { go consume() r := gin.Default() r.GET(&amp;#34;/ping&amp;#34;, func(c *gin.Context) { go produce(time.Now().UnixMilli()) c.</description>
    </item>
    <item>
      <title>2023新年计划</title>
      <link>https://blog.gzhh.tech/posts/the-purpose-of-2023/</link>
      <pubDate>Sat, 28 Jan 2023 23:59:30 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/the-purpose-of-2023/</guid>
      <description>今天大年初七，已经一月底了，2022 年的年终总结一直不想写，因为去年经历过太多不想回忆的事情，生活和工作等很多方面都过的不顺心，所以就觉得不写算了。但春节回家待了几天，身心状态也有些调整，对于 2022 年的个人经历也想记录下来，怕以后忘记。这不今天是假期的最后一天，拖延症再也拖不下去了，因为如果开始春节后的工作再写去年的总结也就没意义了。&#xA;对于我个人来说，2022 这一年印象最深的三件事就是“上半年的上海封城”、“年中裸辞Gap半年”、“年底疫情封控放开”。如果按季度来分的话，那对于大多数人来说可以将 2022 年分为四个季度：第一季度可以归纳为一月份的等待春节、二月份的春节、三月的全国各地开始封控；第二季度归纳为上海全域封城到六月的开始解封；第三季度归纳为闷头苦干；第四季度则归纳为触底反弹的疫情管控全面开放。&#xA;2022 全年盘点 工作&#xA;对于我来说，2022 年个人工作方面其实没有太多可说的，简单分为这几个阶段：第一季度的春节前后维护性工作，到三四月份疫情管控赶进度的远程办公；然后中间 gap 半年；十月份入职新公司到年底负责一个新项目的从零到一。&#xA;学习&#xA;专业知识方面，因为年中 gap 了半年，所以这段时间学习了蛮多这方面的知识，包括以下几个方面&#xA;系统设计：主要通过《System Design Interview》这本书及扩展的知识来学习一些系统设计方面的知识 软件架构 微服务：主要是通过《微服务设计》和《微服务架构设计模式》这两本书来巩固 分布式：主要是结合《Understanding Distributed Systems》这本书及相关概念来增加知识面 架构：《凤凰架构》这本书算是一个架构方面的总结，其中也包括微服务和分布式相关的知识 方法论：看了《The Effective Engineer》、《OKR工作法》，收获很大 因为 gap 了半年，这段时间也巩固了一些计算机基础方面的知识，包括以下知识&#xA;数据结构与算法：剑指 Offer 和 Leetcode 的 hot 题都按类别刷了一两遍 操作系统、计算机网络等方面的基础知识也通过看大部头和个人总结加以巩固 中间件方面的 DB、Cache、MQ 等进行系统性总结归纳其原理及使用 编程语言方面这一年则主要是围绕 Go 语言的生态来进行系统性深入学习 DevOps 方面的知识则是通过进一步深度使用 Docker、Kubernetes 及 CI/CD 等工具 生活&#xA;亲情维系方面，每周至少一次与家人的视频通话应该没有少，但是全年也就春节回过一次家。&#xA;运动方面今年上半年几乎没有怎么运动，封控导致游泳和跑步都无法进行；上海解封后有过一段时间不长的跑步，以及下半年断断续续的游泳。&#xA;今年参加了两次徒步活动，都是在浙江，一次是一天的短途，另一次是三四天的丽水千八长途。&#xA;读书&#xA;今年总的来说看的书没有去年看的多，总共就看了一只手的非专业书。&#xA;《小狗钱钱》、《叫魂》、《梅里雪山》、《哥德尔、艾舍尔、巴赫》&#xA;总结下今年的看书情况，疫情管控和 gap 半年对生活影响很大，导致完全无规划。&#xA;理财&#xA;今年大部分的投资资金也都还放在股票中，全年的收益率差不多是浮亏15%，没有达成去年定下的目标。&#xA;因为 2022 年全年的疫情管控导致的经济下行是肉眼可见的，自然而然股市表现也很差。&#xA;今年股票持有的数量在去年的基础上增加了几支，但持仓总金额不变，持有的股都自认为是价值股。</description>
    </item>
    <item>
      <title>使用 Hugo 和 Github Actions 部署静态网站</title>
      <link>https://blog.gzhh.tech/posts/deploy-static-site-with-hugo-and-github-actions/</link>
      <pubDate>Sat, 17 Sep 2022 02:43:00 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/deploy-static-site-with-hugo-and-github-actions/</guid>
      <description>Table Of Contents 说在前面 博客搭建 首先跟着 Hugo 官方教程一步步操作 再将静态内容发布到 Github Page 使用 Github Action 优化部署 将本地博客项目同步到远程 Github 仓库 新建 workflow 配置域名及域名解析 博客图片 博客评论 参考 说在前面 年初将自己个人博客的部署方式改为 Github Actions 自动部署，其中碰到的坑一直没有空整理成文章输出出来，今天统一将内容整理到这篇文章。&#xA;写之前顺便提下自己写技术博客的历程吧，最开始写博客的时候差不多是在大二的样子，当时主要是在 CSDN 上面写，内容差不多都是记录总结学习各个技术栈碰到的坑；后来大三快出来实习的时候，买了台阿里云的低配 ECS，使用 Wordpress 将自己的个人博客部署在上面；再后来觉得 Wordpress 需要数据库存储内容、且不太好能结合 Markdown 写博客、还有没有太好看的主题等原因，然后就换成在 Jekyll 和 Hexo 对比中选择了后者；Hexo 还是部署在阿里云的，部署方式是通过在 ECS 上搭建 Git 仓库，通过 Git 钩子将 Hexo 生成的博客静态页面文件，推送到 Nginx 服务的托管目录，完成部署。&#xA;到了去年年底，用了几年的阿里云 ECS 到期了，由于续费太贵就没续费，于是就买了腾讯云的 Lighthouse 服务器，打算把博客也迁移过来。但是之前使用 Hexo 的那套部署方式比较麻烦，所以搜索了一番就决定使用 Hugo 和 Github Page 来部署静态博客。&#xA;博客搭建 首先跟着 Hugo 官方教程一步步操作 Hugo quick-start</description>
    </item>
    <item>
      <title>【阅读笔记】Understanding Distributed Systems</title>
      <link>https://blog.gzhh.tech/posts/understanding-distributed-systems/</link>
      <pubDate>Mon, 15 Aug 2022 00:30:07 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/understanding-distributed-systems/</guid>
      <description>Table Of Contents 1. Introduction Part I: Communication 2. Reliable links 3. Secure links 4. Discovery 5. APIs Part II: Coordination 8. Time 9. Leader election 10. Replication 11. Coordination avoidance 12 . Transactions 13. Asynchronous transactions Part III: Scalability 14. HTTP caching 15. Content delivery networks 16. Partitioning 17. File storage 18. Network load balancing 19. Data storage 20. Caching 21. Microservices 22. Control planes and data planes 23.</description>
    </item>
    <item>
      <title>【阅读笔记】The Effective Engineer</title>
      <link>https://blog.gzhh.tech/posts/the-effective-engineer/</link>
      <pubDate>Sat, 16 Jul 2022 18:30:07 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/the-effective-engineer/</guid>
      <description>Table Of Contents Part 1: Adopt the Right Mindsets 1. Focus on High-Leverage Activities 2. Optimize for Learning 3. Prioritize Regularly Part 2: Execute, Execute, Execute 4. Invest in Iteration Speed 5. Measure What You Want to Improve 6. Validate Your Ideas Early and Often 7. Improve Your Project Estimation Skills Part 3: Build Long-Term Value 8. Balance Quality with Pragmatism 9. Minimize Operational Burden 10. Invest in Your Team’s Growth Reference Part 1: Adopt the Right Mindsets 1.</description>
    </item>
    <item>
      <title>【阅读笔记】微服务架构设计模式</title>
      <link>https://blog.gzhh.tech/posts/microservices-patterns/</link>
      <pubDate>Mon, 20 Jun 2022 17:58:50 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/microservices-patterns/</guid>
      <description>Table Of Contents 一、系统架构设计介绍 单体架构 微服务架构 二、服务的拆分策略 拆分规范 拆分策略 拆分难点 三、微服务架构中的进程间通信 RPC（同步通信机制） 同步通信机制局部故障问题 服务发现 消息代理 MQ（异步消息通信机制） 四、管理事务 Saga 五、微服务架构中的业务逻辑设计 业务逻辑组织模式 领域驱动设计 DDD 六、使用事件溯源开发业务逻辑 七、在微服务架构中实现查询 使用API组合模式进行查询 使用CQRS模式 八、外部API模式 九 &amp;amp; 十、微服务架构中的测试策略 自动化测试的四个阶段 测试的不同类型 测试金字塔 使用测试象限进行分类 十一、开发面向生产环境的微服务应用 安全性 可配置 设计可观测的服务 使用微服务基底模式开发服务 服务网格 十二：部署微服务应用 虚拟机 docker k8s 容器部署 Serverless 部署 十三、微服务架构的重构策略 需要考虑的问题 重构策略 设计服务与单体的协作方式 将新功能实现为服务 从单体中提取功能到独立服务 参考 一、系统架构设计介绍 单体架构 定义：一个系统的所有子模块都被部署在同一台服务器上。&#xA;单体架构的好处&#xA;应用的开发简单 易于对应用程序进行大规模的更改 测试相对简单直观 部署简单 横向扩展容易 单体地狱&#xA;随着不断的在单体架构的基础上扩展，每一次实现更多功能的时候，就会导致代码库膨胀。并且随着研发团队规模的不断壮大，团队的管理成本也不断提高，开发变得缓慢和痛苦。&#xA;单体架构的弊端&#xA;过度的复杂性会吓退开发者 开发速度缓慢 从代码提交到实际部署的周期很长，而且容易出问题 难以扩展 交付可靠的单体应用是一项挑战 需要长期依赖某个可能过时的技术栈 微服务架构 定义：将一个单体应用按照不同的功能模块进行分解，拆分成一个个小的服务，每个服务实现了一组相关的功能。</description>
    </item>
    <item>
      <title>2022新年计划</title>
      <link>https://blog.gzhh.tech/posts/the-purpose-of-2022/</link>
      <pubDate>Fri, 31 Dec 2021 23:55:50 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/the-purpose-of-2022/</guid>
      <description>2021全年盘点 工作&#xA;2021年还是在团队中负责技术难度偏弱且业务性比较强的工作，但工作强度全年大部分时间都比较大，所以今年心累的时候比较多，头发感觉也还是在慢慢变稀。&#xA;今年和去年一样，年中的时候公司项目冲刺了两个月，这两个月是996工作制的，两个月实打实的全天工作，高负荷确实很伤身体，今年下半年到现在右肩都时不时会感到痛。&#xA;总体来说个人对今年的工作内容都不怎么喜欢，偏业务性的工作太多，在技术方面的沉淀可以说很少，空闲时间研究的技术又很难在工作中用到，所以今年还是比较焦虑的。&#xA;最后年底晋升了，工资也稍微涨了些，算是踩尾巴完成去年定下的一个目标吧。&#xA;学习&#xA;在技术方面，今年通过下面这些技术书籍，深度理解了一些技术知识&#xA;《数据密集型应用系统设计（DDIA）》学习了些数据方面相关的知识 《Redis设计与实现》学习了了Redis原理及设计相关的一些知识 《HTTP/2 in Action 中文版》学习了一些HTTP概念及HTTP2等相关前沿的一些知识 《MySQL是怎样运行的》从底层深度了解了一些MySQL原理相关的知识 《The Go Programming Language》等Golang技术方面的书籍，深度学习了Golang相关知识 行业知识方面的书籍有&#xA;《UNIX传奇》了解一些unix发展历史 《程序化广告》了解了一些在线广告相关的一些知识 生活&#xA;生活方面2021全年回了两次老家，一次是春季假期在家呆了六天，第二次是国庆节，回家呆了三天。&#xA;运动方面今年有断断续续的去游泳，为数不多的跑步则主要是集中在夏天。&#xA;今年参加了两次徒步活动，清明节期间去天目山花了三天穿越七尖，这次强度很大，体能差点被拉爆了；中秋节完成武功山到明月山的三天穿越活动，在这之后收获了一份短暂感情。&#xA;读书&#xA;2021年总的来说看的书没有去年看的多，总共就看了十几本非技术书吧，年初和年底稍微看了几本，年中由于加班多，所以荒废了。&#xA;今年看的书基本也都是在书店看的，也有尝试过在家看书，但是做不到一整天都看书，容易被各种电子设备吸引注意力，这个方面还是希望自己能改进。&#xA;下面列出了今年看过的一些非技术书：&#xA;《江村经济》、《如何阅读一本书》、《江城》、《夹边沟记事》、《定西.孤儿院纪事》、《甘南纪事》、《你一定爱读的极简欧洲史》、《德米安》、《寻路中国》、《思考，快与慢》、《学习之道》、《中国近代史-徐中约》&#xA;总结下今年的看书情况，工作对个人的生活有很大影响，也导致今年看的书不多，也缺少计划。&#xA;理财&#xA;2021年大部分的投资资金都放在股票中，股票全年的收益率差不多快到15%，勉强完成去年定下的目标；今年基金中只放了很小一部分的资金，可以忽略不计。&#xA;总的来说，2021年是股市不怎么景气的一年，很多人今年理财投资都亏了钱，尤其是去年大红大火的各大明星基金经理，今年大多都套在了去年的各大白马股上；另外今年美股的中概互联也是惨不忍睹，同样港股的恒指也跌无止境。&#xA;我个人今年股票的投资理念是长期持有低估值股、逢低加仓、做低成本，等待价值回归，这些理念也确实在个股大跌长熊的时候给了我很强的底气，也最终在第四季度的时候慢慢开始浮盈。&#xA;2022新年计划 工作&#xA;20、21这两年的工作体验不太好，工作压力大，除了睡觉时间随时准备 Oncall，且日常处理偏业务性的工作内容过多，导致技术能力提升有限。&#xA;针对此也一直很难看到有改善的机会，所以2022年准备尝试换一个工作环境，希望最终能有一个好的结果。&#xA;学习&#xA;最近两三年的个人空闲时间学习的东西很零散，没有形成体系，也基本没有在工作中应用自己学的新东西，导致很多东西学完不久就忘了。&#xA;所以2022年个人的学习可能主要集中在跟工作内容相关的一些知识和技术方面的东西，毕竟个人的精力是有限的。&#xA;生活&#xA;这两年生活在新冠下，都快慢慢忘记了以前的生活，希望2022年在全球所有人的努力下，人类能战胜新冠，让所有人都能回归正常的生活。&#xA;然后希望有时间能多陪陪父母，即使回不了老家也尽量多视频联系，尽量控制好沟通语气。&#xA;个人情感方面争取能寻找到合适的另一半，也不只能嘴上说说，自己也会慢慢付出行动。&#xA;运动方面就是多多运动吧，跑步游泳多做做计划，不要三天打鱼两天晒网，有机会也尽量多踢足球。&#xA;徒步旅行方面计划2022年能去川西或者云南爬一次雪山，然后再去北疆徒步一次，最后周末尽量多去江浙附近山里徒步几次。&#xA;读书&#xA;读书就不立新flag了，2021年的flag还有大半没有完成，今年的目标就是把2021立的flag完成吧。&#xA;2022准备完成2021未完成的读书Flag&#xA;理财&#xA;看到很多大v预测2022年的股市是慢牛，我觉得还是有很大的不稳定性，具体还得看新冠。&#xA;我的2022年投资理财策略还是寻找低估个股、长期持有、逢低加仓，等待价值回归。</description>
    </item>
    <item>
      <title>Gin 生命周期</title>
      <link>https://blog.gzhh.tech/posts/lifecycle-of-gin-framework/</link>
      <pubDate>Mon, 05 Jul 2021 17:38:50 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/lifecycle-of-gin-framework/</guid>
      <description>Table Of Contents 一、Gin 简介 Gin 特性 目录结构 二、实现原理 从官网 Demo 开始 Gin 生命周期 三、总结 Ref 一、Gin 简介 Gin is a HTTP web framework written in Go (Golang). It features a Martini-like API with much better performance &amp;ndash; up to 40 times faster. If you need smashing performance, get yourself some Gin.&#xA;Gin 是使用 Golang/Go 实现的 HTTP Web 框架，代码简洁且性能高。截止 1.8.0 版本为止，总体实现代码 18K 行，而去掉测试代码的话则仅为 7K 行。&#xA;$ find . -name &amp;#34;*.</description>
    </item>
    <item>
      <title>2021新年计划</title>
      <link>https://blog.gzhh.tech/posts/the-purpose-of-2021/</link>
      <pubDate>Fri, 01 Jan 2021 01:10:50 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/the-purpose-of-2021/</guid>
      <description>2020全年盘点 工作&#xA;2020年一月份向前公司提了离职计划，恰巧一月底疫情变得严重起来，到二月底差不多一个月只能呆在家里，三月份才正式入职新公司（也就是现在就职的公司）。&#xA;刚入职现公司不久就参加了两个月的项目冲刺996工作制度，新公司所在小组业务需求比较繁多，迭代速度快，全年压力都很大，导致整个一年都在持续不断的掉头发。&#xA;工作压力直到逐渐熟悉业务系统，并第四个季度公司进入敏捷开发阶段后，才慢慢减轻，再就是年底12月份末尾也被普调一波涨了一次薪水。&#xA;生活 全年回了两次家，由于疫情春季期间在家呆了差不多一个月，这一个月也是完全刷剧荒废了；第二次回家是国庆回家呆了三天。&#xA;全年参加了两次徒步活动，五一期间去仙居公盂参加了中途两天多的徒步活动；十一期间去舟山大洋山岛参加了短途一天的徒步活动。&#xA;读书 2020年总的来说大概读了20本左右非技术书吧，各种类型的书都有几本吧，有的书很难读懂，只能说看完，并不能说都理解。&#xA;然后全年去了蛮多次书店和自习室去学习或者看书的，为什么不在家里面看呢，因为周末在家里我实在看不下去书，去书店看本着类似有人监督和有气氛的目的，才看的下去。&#xA;下面列出了今年看过的一些非技术书&#xA;《许三观卖血记》、《明朝那些事》、《少年凯歌》、《战争风云》、《动物庄园》、《2001：太空漫游》、《无人生还》、《邓小平时代》、《富爸爸，穷爸爸》、《局外人》、《鼠疫》、《情人》、《路易·波拿巴的雾月十八日》、《小王子》、《余下只有噪音 : 聆听20世纪》、《跨越边界的社区》、《1984》、《天堂城堡中的音乐 : 巴赫传》、《习惯的力量》、《悉达多》&#xA;理财&#xA;2020年从零开始学习理财知识，年初开始尝试基金理财，第四季度开始尝试股票投资；基金股票投资比例1:4，基金全年收益率7%，股票全年收益率-0.5%。&#xA;总的来说，2020年是股市牛年，很多人今年理财投资都有蛮多收益率的，而我的理财投资理念还处于初步阶段，今年大概有微微的收益，权当学习新知识吧。&#xA;2021全年计划 工作学习&#xA;工作方面还是希望自己能成长为高级开发工程师，对业务和对技术的理解力能更进一步台阶。&#xA;然后技术方面还是要不断巩固计算机基础理解能力，要持续看一些经典技术书籍，然后应用技术方面也要培养快速学习+实践落地的能力。&#xA;生活&#xA;如果条件允许，再抽时间带父母家人出去旅游一次，自从2019年接父母过来上海玩两三天之后还没有带他们出去玩过。&#xA;希望能进行一次长途的旅行，解锁新的城市，然后中短途旅行也要有两三次。&#xA;读书&#xA;希望2021年能按计划分类读一些书吧，主要有逻辑思维、历史哲学、文学、金融理财等类别的书籍吧&#xA;2021读书Flag&#xA;理财&#xA;会继续进行基金和股票投资，把两者的投资比例调成5:5，投资策略会通过学习不断调整，然后希望最终的年化收益率能有15%吧。</description>
    </item>
    <item>
      <title>理解 Go 函数中的切片传参</title>
      <link>https://blog.gzhh.tech/posts/understand-slice-param-in-go-function/</link>
      <pubDate>Fri, 19 Jun 2020 17:00:00 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/understand-slice-param-in-go-function/</guid>
      <description>Table Of Contents 切片（Slice） 函数使用切片传参涉及到的拷贝及扩容 例一：切片传参且函数内只有读操作 例二：切片传参且函数有修改操作（不涉及扩容） 例三：切片传参且函数有修改操作（涉及扩容） 例四：切片指针传参且函数有修改操作（不涉及扩容） 例五：切片指针传参且函数有修改操作（涉及扩容） 参考 切片（Slice） 我们知道在 Go 中切片的底层数据结构是一个结构体，结构体中有一个指针 array 指向一个底层数组，len 表示当前切片的长度，cap 表示当前切片的容量。&#xA;type slice struct { array unsafe.Pointer len int cap int } 函数使用切片传参涉及到的拷贝及扩容 例一：切片传参且函数内只有读操作 package main import &amp;#34;fmt&amp;#34; func test(nums []int) { fmt.Printf(&amp;#34;\ninner before address: %p\n&amp;#34;, nums) fmt.Println(&amp;#34;inner before len: &amp;#34;, len(nums)) for _, num := range nums { _ = num } fmt.Printf(&amp;#34;inner after address: %p\n&amp;#34;, nums) fmt.Println(&amp;#34;inner after len: &amp;#34;, len(nums)) } func main() { nums := []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} fmt.</description>
    </item>
    <item>
      <title>MySQL 锁</title>
      <link>https://blog.gzhh.tech/posts/know_mysql_lock/</link>
      <pubDate>Sun, 23 Feb 2020 09:43:53 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/know_mysql_lock/</guid>
      <description>锁介绍 假设我们有一个商品表 item，里面有两个字段 id 和 store&#xA;+----+-------+ | id | store | +----+-------+ | 1 | 1 | +----+-------+ 一般我们在生成订单之前会先确定 store 商品库存是否大于你要购买的数量，然后更新库存&#xA;-- 查询 SELECT store FROM item WHERE id = 1; -- 更新 UPDATE item SET store = store - 1 WHERE id = 1; 但是这样在用户大量并发操作的时候会是不安全的，比如第一个用户 SELECT 到的 store 是 1，但是当他准备 UPDATE 的时候，可能已经有人把库存 store 扣成了 0，那么第一个用户再去 UPDATE 的时候，就可能出现负库存的情况，因此我们必须通过事务和锁机制来确保读取及提交的数据都是正确的。&#xA;在 MySQL 终端我们可以这样测试&#xA;SET AUTOCOMMIT=0; BEGIN; SELECT store FROM item WHERE id=1 FOR UPDATE; 此时 item 表中 id=1 的这行数据被锁住（InnoDB 的 Row Lock 或 Table Lock）其他事务必须等待此次事务提交后才能执行； SELECT store FROM item WHERE id=1 FOR UPDATE; 可以确保库存 store 在别的事务读取到的数字是正确的； 然后我们修改库存，提交数据写入数据库，item 表中 id=1 的这行数据解锁。</description>
    </item>
    <item>
      <title>LaTeX 学习记录</title>
      <link>https://blog.gzhh.tech/posts/latex-usage-notes/</link>
      <pubDate>Sun, 20 Oct 2019 17:23:05 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/latex-usage-notes/</guid>
      <description>说在前面 最早接触的文字排版是 markdown，当时在 sublime 上面装了个插件就能把 .md 后缀文件生成 pdf，后来陆续读了 一些 LaTeX 排版的电子书籍(当时并不知道是 LaTeX 排版的)，觉得这样的排版很简洁，一直想使用这样的排版工具 写一些文档之类的东西，后来了解到 LaTeX 是 Lamport 基于 Knuth 发明的 TeX 演变开发出来的排版工具，现在笔者就把 LaTeX 的简单使用记录下来，方便 读者和自己查阅。&#xA;LaTeX 文本介绍 1.空格&#xA;多个空格和 tab 都被当作一个空格，多个空行被当作一个空行，一个空行表示两个段落之间的分隔&#xA;2.特殊字符&#xA;特殊字符的显示可以在前面加反斜线 \&#xA;3.LaTeX 命令&#xA;LaTeX 命令只由反斜线 \ 和大小写字母组成，命令名通过空格、数字或其他非字母字符结束&#xA;LaTeX 忽略命令后面的空格，可以使用命令加上 {} 再加上空格来保留空格&#xA;4.注释&#xA;单行注释：一行中 % 后面的字符都会被注释&#xA;多行注释：\begin{comment} 和 \end{comment} 直接的文本会被注释&#xA;LaTeX 文本结构 1.开始命令&#xA;\documentclass{&amp;hellip;}&#xA;2.加载包命令&#xA;\usepackage{&amp;hellip;}&#xA;3.开始文本主体命令&#xA;\begin{document}&#xA;4.结束文本主体命令&#xA;\end{document}&#xA;例子一：&#xA;\documentclass{article} \begin{document} This is a text. \end{document} 例子二：</description>
    </item>
    <item>
      <title>Lua 语言入门（二）</title>
      <link>https://blog.gzhh.tech/posts/play-lua-second/</link>
      <pubDate>Sun, 06 Oct 2019 09:22:54 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/play-lua-second/</guid>
      <description>说在前面 这一篇接着 Lua 语言入门（一） 继续写，主要是 lua 稍微高级一点的编程方式。&#xA;1.Closure 闭包&#xA;-- 普通函数 function foo (x) return 2*x end print(foo(1)) -- 将函数复制给一个变量 bar = function (x) return 3*x end print(bar(1)) -- 匿名函数 network = { {name = &amp;#34;grauna&amp;#34;, IP = &amp;#34;210.26.30.34&amp;#34;}, {name = &amp;#34;arraial&amp;#34;, IP = &amp;#34;210.26.30.23&amp;#34;}, {name = &amp;#34;lua&amp;#34;, IP = &amp;#34;210.26.23.12&amp;#34;}, {name = &amp;#34;derain&amp;#34;, IP = &amp;#34;210.26.23.20&amp;#34;}, } table.sort(network, function (a, b) return (a.name &amp;gt; b.name) end) for _, item in ipairs(network) do print(&amp;#34;name:&amp;#34;, item.</description>
    </item>
    <item>
      <title>Lua 语言入门（一）</title>
      <link>https://blog.gzhh.tech/posts/play-lua-first/</link>
      <pubDate>Sun, 29 Sep 2019 20:20:36 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/play-lua-first/</guid>
      <description>说在前面 由于前段时间使用 Redis 相关技术接触到了 Lua 脚本用于提升 Redis 性能，再加上之前对 Nginx 可以使用 Lua 技术进行扩展非常感兴趣，所以这段时间抽空学习了下Lua，现在把自己初学 Lua 的 经历记录下来，供自己与各位同行参考和交流。&#xA;1.代码块 进入交互模式 lua 执行 lua 脚本后进入交互模式 Lua -i test.lua 交互模式中执行 lua 脚本 dofile(&amp;ldquo;test.lua&amp;rdquo;)&#xA;2.词法惯例 标识符：大小写敏感 注释：单行&amp;ndash;，多行&amp;ndash;[[]]&amp;ndash;，只有第一行和最后一行被注释&amp;mdash;[[]]&amp;ndash; 分号：两条语句之间可写可不写&#xA;3.全局变量 默认 nil&#xA;4.变量和类型 由于 Lua 是动态语言，所以变量没有类型，但是每个值都有它们自己的类型 八个基本类型：&#xA;value: &amp;gt; type(nil)&#x9;--&amp;gt; nil &amp;gt; type(true) --&amp;gt; boolean &amp;gt; type(10.4 * 3) --&amp;gt; number &amp;gt; type(&amp;#34;Hello world&amp;#34;) --&amp;gt; string &amp;gt; type(io.stdin) --&amp;gt; userdata &amp;gt; type(print) --&amp;gt; function &amp;gt; type(type) --&amp;gt; function &amp;gt; type({}) --&amp;gt; table &amp;gt; type(type(X)) --&amp;gt; string 5.</description>
    </item>
    <item>
      <title>【操作系统】3.内存memory(抽象的地址空间)</title>
      <link>https://blog.gzhh.tech/posts/operating-system-3.memory/</link>
      <pubDate>Mon, 11 Mar 2019 01:08:00 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/operating-system-3.memory/</guid>
      <description>介绍 早期的操作系统实现功能起来很简单，一般看来，物理内存的结构就一般分为俩快：一块用来存os的代码和数据，另一块给当前程序的代码和数据。就像下图：&#xA;但是随着多程序的诞生，为了避免在进程间频繁的切换损失性能，所以重新设计了内存的结构，来增加效率，就像下图这样，每个进程都有自己的私有空间，保护了进程的安全，不受其他进程影响&#xA;为了用起来方便，我们让操作系统创建了物理内存的抽象，叫做地址空间 address space，它是运行中程序的视图，地址空间是内存虚拟化的关键，进程的地址空间包含所有在运行中程序的记忆状态；用地址空间的顶部来存静态代码，提高空间利用率；用栈区来保存函数调用链，局部变量，传递形参，返回值等；用堆区来动态分配内存，用户管理内存，例如c语言里的malloc()和c++里面的new，其他的还有静态区 我们抽象的假设code区在顶部，它的下面是heap区，堆动态向下增长，堆的下面是free区，free区的下面是stack区，stack会动态向上增长。&#xA;然而事实上进程在内存中的地址是随机&#xA;所以就出现了虚拟化内存virtualizing memory，即操作系统为正在运行的多个进程分配私有、潜在、独立的地址空间，所有的虚拟地址都会被操作系统翻译成真实物理地址，然后就可以获取到各种值和信息&#xA;可以写段代码测试下内存中的虚拟地址&#xA;#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; /*打印code, heap, stack三个区的虚拟地址，十六进制表示*/ int main(int argc, char *argv[]) { printf(&amp;quot;location of code : %p\n&amp;quot;, (void *) main); // main函数开始地址 printf(&amp;quot;location of heap : %p\n&amp;quot;, (void *) malloc(1)); int x = 3; printf(&amp;quot;location of stack : %p\n&amp;quot;, (void *) &amp;amp;x); return x; } /* 大致结果： location of code : 0x4005d6 location of heap : 0xcc1420 location of stack : 0x7ffde8e29124 */ 分配和管理内存 操作系统提供了一些api来给用户管理内存 1.</description>
    </item>
    <item>
      <title>【操作系统】2.调度scheduling</title>
      <link>https://blog.gzhh.tech/posts/operating-system-2.scheduling/</link>
      <pubDate>Wed, 27 Feb 2019 16:37:33 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/operating-system-2.scheduling/</guid>
      <description>调度的前提：限制 为了虚拟化 CPU，操作系统需要将物理 CPU 分享给正在运行的作业，即进程。虚拟化的基础思想是：运行一个进程一会儿，然后再运行另一个，一直下去，按时间来分享 CPU。 然而建立虚拟机有两个难题：性能和控制性，虚拟机的可控性非常重要，他可以让进程在系统中稳定的运行，不会崩溃，所以就有了一个技术: Limited Direct Execution(限制直接执行)。 如果不做限制，一般是当操作系统想运行某个程序的时候，系统就会在进程表里面创建一条记录，然后分配内存给程序，并把程序代码加载到内存里面去，然后开始运行程序代码。 Limited Direct Execution 是说当操作系统想让一个程序运行的时候，不直接让它做上面的操作，需要避免危险操作。&#xA;所以下面我们有两个需要注意的：&#xA;1.严格操作 Restricted Operations 系统会给一些危险的操作设置模式，用来保护系统，例如文件系统的读写权限模式。 2.上下文切换 Switching Between Processes 上下文切换即可以理解为进程间的切换，上下文切换需要一定的策略，可以根据进程的优先级来判断，切换时会消耗一定的资源。 切换有两种方式： 合作方式：由进程等等系统调用 操作系统有依据的信任进程。 非合作方式：由操作系统控制 操作系统完全控制着进程的停止和开始。 调度介绍 操作系统在执行多个作业的时候，总是需要在各个作业之间切换，调度就是用来实现这个的。&#xA;调度有许多种思想，叫做调度策略，大致有如下几种：&#xA;1.先来先服务 First In, First Out (FIFO) 或 First Come, First Served (FCFS) 2.短作业优先 Shortest Job First (SJF) 3.抢占式短作业优先 Shortest Time-to-Completion First (STCF) 4.轮循 Round Robin 5.多级反馈队列 Multi-level Feedback Queue (MLFQ) 有一些指标可以用来衡量调度策略的优劣&#xA;1.周转时间 turnaround time T_turnaround = T_completion − T_arrival 周转时间 = 完成的时间点 - 开始的时间点 2.</description>
    </item>
    <item>
      <title>【操作系统】1.进程process</title>
      <link>https://blog.gzhh.tech/posts/operating-system-1.process/</link>
      <pubDate>Mon, 25 Feb 2019 23:00:39 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/operating-system-1.process/</guid>
      <description>介绍 什么是进程：简单来说就是一个正在运行中的程序 进程是程序的一次执行，包括代码和数据，是CPU分配资源的基本单位，一个进程可以包括多个线程。&#xA;进程之间通信方式：管道、SOCKET、信号量（互斥、同步）等。&#xA;子进程是父进程的复制品。子进程获得父进程数据空间、堆和栈的复制品。&#xA;线程是独立运行和独立调度的基本单位（线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更 高效的提高系统内多个程序间并发执行的程度），线程之间共享进程的数据空间（借此通信）&#xA;进程接口 操作系统提供一些 API 给进程调用，例如 create 创建, destroy 销毁, wait 等, suspend 暂停, status 状态等。&#xA;1.fork()&#xA;fork函数复制了当前进程，生成子进程，子进程与父进程不完全相同，子进程有自己的资源，例如：address space (private memory), registers, PC。&#xA;子进程不会从 main 函数开始运行，只会从调用 fork 函数处开始运行。&#xA;fork调用的一个奇妙之处就是它仅仅被调用一次，却能够返回两次，它可能有三种不同的返回值：&#xA;1）在父进程中，fork返回新创建子进程的进程ID；&#xA;2）在子进程中，fork返回0；&#xA;3）如果出现错误，fork返回一个负值；&#xA;#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; int main(int argc, char *argv[]) { printf(&amp;quot;hello (pid:%d)\n&amp;quot;, (int) getpid()); int rc = fork(); if (rc &amp;lt; 0) { // fork failed, exit fprintf(stderr, &amp;quot;fork failed\n&amp;quot;); exit(1); } else if (rc == 0) { // child (new process) printf(&amp;quot;hello, i am child (pid:%d)\n&amp;quot;, (int) getpid()); } else { // parent goes down this path (main) printf(&amp;quot;hello, i am parent of %d (pid:%d)\n&amp;quot;, rc, (int) getpid()); } return 0; } /* 复制了当前进程的备份，称为子进程，子进程一般在父进程执行完后再执行，子进程不会从 main 函数开始 执行，而是从 fork 函数开始执行 大致结果： hello (pid:10642) hello, i am parent of 10643 (pid:10642) hello, i am child (pid:10643) */ 2.</description>
    </item>
    <item>
      <title>【操作系统】基础概念介绍</title>
      <link>https://blog.gzhh.tech/posts/operating-system-0.basic-info/</link>
      <pubDate>Sat, 23 Feb 2019 09:43:53 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/operating-system-0.basic-info/</guid>
      <description>进程：正在运行的程序&#xA;线程：是操作系统能够进行运算调度的最小单位，他被包含在进程中，是进程中的实际运作单位。（抢占式、可并发、 OS 控制）&#xA;协程：协程是一种程序组件、协程更为一般和灵活（非抢占式、模拟并发、用户控制）&#xA;并行：多个进程同时工作&#xA;并发：多个进程不同时工作</description>
    </item>
    <item>
      <title>2019新年计划</title>
      <link>https://blog.gzhh.tech/posts/the-purpose-of-2019/</link>
      <pubDate>Tue, 01 Jan 2019 22:10:51 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/the-purpose-of-2019/</guid>
      <description>2018全年盘点 2018年刚从学校毕业，虽然推迟了两三月才拿到毕业证，但总归是拿到了，得到的教训是要认真的对待自己看起来不重要的大事。&#xA;2018年换了份工作，虽说是实习，但还是要总结下，这份工作辞职是因为技术方面满足不了自已的预期。但其实都是自已问题，没有真实的评估自己想要什么，导致最后草草收场，严重影响了职业规划。&#xA;2018年个人私生活可以说是比较无章法和无底线。其一社交状态趋于真空，无法提升；其二身心健康每况愈下，愤世嫉俗比较突出。&#xA;2019全年计划 学习方面还是应该还是要坚持看书，计算机方面的书籍尽量只看些经典书籍，其他主要看些收藏已久的文学社科方面书籍。&#xA;工作方面要发自内心的去想自己到底想要想做的是什么，想清楚后再做决定，不能再像之前那样急忙做决定，到最后草草收场，不利己。然后要努力学习工作中必备的技能，包括沟通技巧、任务规划、个人定位、解决问题方法等。&#xA;生活方面不能再像之前毫无节制的挥霍身体，毫不用心维护朋友之间联系。尽量和朋友多出去走走，多认识些有趣的人，多去些有趣的地方，和朋友相处也不能再像之前那般直言不讳，说话前先留几秒钟思考下。也应该要多多锻炼身体，多跑跑步和健身，时间合理可以去踢下球和徒个步。</description>
    </item>
    <item>
      <title>对于如何提升能力的一些思考</title>
      <link>https://blog.gzhh.tech/posts/how-to-improve-yourself/</link>
      <pubDate>Thu, 06 Sep 2018 00:53:07 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/how-to-improve-yourself/</guid>
      <description>&lt;p&gt;如何在技术快速发展的时代成为逐浪者？随着接触越来越多的新技术新名词，内心就越会感觉到知识的空虚，恨不得一下子就多学一门新技术，但是对每个技术都是浅尝即止，很难深入．最近思来想去只能把问题集中在基础不扎实上．如果技术扎实，那么在尝试新技术的时候心里底气就会足一点，学起来也就不会那么吃力了．&lt;/p&gt;</description>
    </item>
    <item>
      <title>SSO 单点登录</title>
      <link>https://blog.gzhh.tech/posts/sso/</link>
      <pubDate>Sun, 01 Apr 2018 23:24:03 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/sso/</guid>
      <description>说在前面 由于公司要开发几套系统，并且需要几套系统使用统一的用户管理功能，TM让我研究如何实现多系统的单点登录，这周零零碎碎研究了下，所以写下这篇文章，加深下理解，也方便以后回顾。&#xA;介绍 Single sign-on(SSO) 是多个相关但彼此独立的软件系统访问控制的一个属性，也就是用户只使用一个账号和密码来访问多个系统。 单点登录在大型的系统中经常用到，例如：刚开始你的百度搜索 www.baidu.com 和百度云盘都是没有登录的，现在当你登录了百度搜索的系统后，再去刷新一下百度云盘的系统时，这时你会发现百度云盘这边也是显示登录的，这种情况就是使用 SSO 技术实现的。 CAS(Central Authentication Service) 旨在为 Web 应用系统提供一种可靠的单点登录解决方法（属于 Web SSO ）。&#xA;HTTP 知识介绍 由于 HTTP 是无状态的协议，所以我们需要使用某些机制来保存web用户浏览的状态。Cookie 和 Session 都是用来保存web状态的两种技术，区别是 Cookie 是在客户端来保存用户状态，Session 是在服务端来保存用户状态。&#xA;SSO 的几种情况 1.同域下的不同服务 例如我们有两个服务 test.com/site1 test.com/site2 这是最简单的一种情况(不过一般大型系统会用域来区分两个服务)，两个服务共享一个主机地址，且在同一个域下。这种情况下两个业务共享一 个 Cookie 和 Session，所以不用做特别的处理，按照常规的验证方式即可，当你在 site1 上登录了，在 site2 上自然而然也是登录的。&#xA;2.同父域不同子域的服务 例如 site1.x.com site2.x.com 这种情况两个服务的主机是不相同的(父域相同，子域不同)，这种情况我们一般可以设置两个服务的 Cookie 都是在当前域的顶级域下的，也就是 x.com 域下。 cas.x.com 设置一个 CAS(Central Authentication Service)，所有的与登录和验证token和设置 Cookie 的 操作我们都放在 CAS 上面&#xA;3.完全不同域的服务 例如 site1.com site2.com</description>
    </item>
    <item>
      <title>常见排序算法</title>
      <link>https://blog.gzhh.tech/posts/sort-algorithm/</link>
      <pubDate>Sun, 01 Apr 2018 23:24:03 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/sort-algorithm/</guid>
      <description>简介：八大排序算法 插入排序【直接插入排序和希尔排序】&#xA;交换排序【冒泡排序和快速排序】&#xA;选择排序【选择排序和堆排序】&#xA;归并排序&#xA;基数排序&#xA;一、直接插入排序 假设这里有一数组&#xA;n = 9; a[n] = {6,7,1,9,5,2,8,3,4}; // 从当前位置向前遍历 6 6 7 1 6 7 1 6 7 9 1 5 6 7 9 1 2 5 6 7 9 1 2 5 6 7 8 9 1 2 3 5 6 7 8 9 1 2 3 4 5 6 7 8 9 代码&#xA;#include&amp;lt;iostream&amp;gt; using namespace std; // 直接插入排序 void insertSort(int a[], int n) { for (int i = 1; i &amp;lt; n; i++) { int j = i, m = a[i]; while (a[j-1] &amp;gt; m) { a[j] = a[j-1]; j--; } a[j] = m; } } int main() { int n = 9; int a[n] = {6,7,1,9,5,2,8,3,4}; insertSort(a, n); for (int i = 0; i &amp;lt; n; i++) cout &amp;lt;&amp;lt; a[i] &amp;lt;&amp;lt; &amp;quot; &amp;quot;; cout &amp;lt;&amp;lt; endl; } 二、希尔排序 希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。 希尔排序是基于插入排序的以下两点性质而提出改进方法的：</description>
    </item>
    <item>
      <title>【VIM】vim常用操作</title>
      <link>https://blog.gzhh.tech/posts/vim-skill/</link>
      <pubDate>Fri, 23 Mar 2018 09:22:30 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/vim-skill/</guid>
      <description>1.一般模式(默认模式)： Ctrl+f 向下移动一页 Ctrl+b 向上移动一页 0或Home&#x9;移到这一行的最前面字符处 $或End&#x9;移到这一行的最后面字符处 G&#x9;移到这个文件的最后一行 nG&#x9;移到这个文件的第n行 gg&#x9;移到这个文件的第一行 n+Enter 向下移动n行&#xA;查找 /word 向下寻找一个名称为word的字符串 ?word&#x9;向上寻找一个名称为word的字符串 n 向下重复前一个查找 N 向上重复前一个查找&#xA;替换 :n1,n2s/word1/word2/g 在第n1行与n2行直接寻找word1这个字符串，并将该字符串替换为word2 :n1,n2s/word1/word2/gc&#x9;逐个询问是否替换 :1,$s/word1/word2/g 第一行到最后一行 ;1,$s/word1/word2/gc 逐个询问&#xA;第一行到最后一行 :1,$s/search/replace/g :%s/search/replace/g&#xA;指定行m,n :m,ns/search/replace/g&#xA;当前行到x行 :.,.+xs/search/replace/g&#xA;当前行到最后一行 :.,$s/search/replace/g&#xA;删除 x,X 向后向前删除字符，(Del, Backspace) nx dd&#x9;删除光标所在的那一行 ndd&#x9;往下删除n行&#xA;复制 yy&#x9;复制光标所在的那一行 nyy&#x9;向下复制n行&#xA;粘贴 p,p 向上向下粘贴&#xA;复原前一个操作 u&#xA;重复上一个操作 Ctrl+r或.&#xA;2.编辑模式 一般模式按i,I,o,O,a,A,r,R其中一个可进入编辑模式，编辑模式按Esc可退回一般模式 i,I 光标所在行插入 a,A 光标下一个字符插入，光标行之后一个字符插入 o,O 下一行插入，上一行插入 r,R 替换光标所在字符</description>
    </item>
    <item>
      <title>2018新年计划</title>
      <link>https://blog.gzhh.tech/posts/the-purpose-of-2018/</link>
      <pubDate>Mon, 01 Jan 2018 00:43:02 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/the-purpose-of-2018/</guid>
      <description>&lt;p&gt;2018要来了，回想2017年出校门实习的这半年来，学到了挺多职场的知识，但是对自己还是不够满意，比自己的期望也低了好多，而且人也变得懒惰了，希望2018能改掉这些毛病，努力争取获取的一个更好的机会。&lt;/p&gt;</description>
    </item>
    <item>
      <title>玩转sed操作文本-基础篇</title>
      <link>https://blog.gzhh.tech/posts/play-sed-first/</link>
      <pubDate>Fri, 17 Nov 2017 18:42:35 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/play-sed-first/</guid>
      <description>介绍 sed 全名是 stream editor，是文本流处理方面的强大工具，和另一个文本处理工具 awk 工具有的一比，接下来就让我们简单介绍下它的基本使用和适用场景。 我们这篇主要讲的是 Gnu sed，还有一个常用的是 BSD sed（Mac OS就是源自 BSD 的），两者略微有点不同，不过他们俩都是由 Posix sed 演化而来。&#xA;基本格式 sed 命令的执行有两种基本格式 sed [-参数] command [file &amp;hellip;] sed [-参数] [-e command] [-f command_file] [-i extension]&#xA;参数 默认情况下，sed 不会操作原来的文本，加上 -i 参数则会改变原文件的内容 sed -i command [file &amp;hellip;]&#xA;替换 1.将文件中每行所有的字符 , 都替换为空字符(不加 g 标记则只替换每行第一个匹配) sed &#39;s/,/ /g&#39; file.txt 2.从第 N 处匹配开始替换 /ng sed &#39;s/,/ /2g&#39; file.txt 3.将字符 , 替换为空字符并保存替换后的内容 sed -i &#39;s/,/ /g&#39; file.</description>
    </item>
    <item>
      <title>2017新年计划</title>
      <link>https://blog.gzhh.tech/posts/the-purpose-of-2017/</link>
      <pubDate>Sun, 01 Jan 2017 23:26:25 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/the-purpose-of-2017/</guid>
      <description>&lt;p&gt;今天是2017年的第一天，度过了有很过欢笑也有很多悲伤的2016年，不管怎样，2016年都过去了，新生活还要继续，写点新年的计划吧，虽然知道很大部分很难完成，但还是写一下吧，万一完成了呢。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OperatingSystem on gzhh&#39;s blog</title>
    <link>https://blog.gzhh.tech/categories/operatingsystem/</link>
    <description>Recent content in OperatingSystem on gzhh&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 11 Mar 2019 01:08:00 +0800</lastBuildDate>
    <atom:link href="https://blog.gzhh.tech/categories/operatingsystem/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【操作系统】3.内存memory(抽象的地址空间)</title>
      <link>https://blog.gzhh.tech/posts/operating-system-3.memory/</link>
      <pubDate>Mon, 11 Mar 2019 01:08:00 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/operating-system-3.memory/</guid>
      <description>介绍 早期的操作系统实现功能起来很简单，一般看来，物理内存的结构就一般分为俩快：一块用来存os的代码和数据，另一块给当前程序的代码和数据。就像下图：&#xA;但是随着多程序的诞生，为了避免在进程间频繁的切换损失性能，所以重新设计了内存的结构，来增加效率，就像下图这样，每个进程都有自己的私有空间，保护了进程的安全，不受其他进程影响&#xA;为了用起来方便，我们让操作系统创建了物理内存的抽象，叫做地址空间 address space，它是运行中程序的视图，地址空间是内存虚拟化的关键，进程的地址空间包含所有在运行中程序的记忆状态；用地址空间的顶部来存静态代码，提高空间利用率；用栈区来保存函数调用链，局部变量，传递形参，返回值等；用堆区来动态分配内存，用户管理内存，例如c语言里的malloc()和c++里面的new，其他的还有静态区 我们抽象的假设code区在顶部，它的下面是heap区，堆动态向下增长，堆的下面是free区，free区的下面是stack区，stack会动态向上增长。&#xA;然而事实上进程在内存中的地址是随机&#xA;所以就出现了虚拟化内存virtualizing memory，即操作系统为正在运行的多个进程分配私有、潜在、独立的地址空间，所有的虚拟地址都会被操作系统翻译成真实物理地址，然后就可以获取到各种值和信息&#xA;可以写段代码测试下内存中的虚拟地址&#xA;#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; /*打印code, heap, stack三个区的虚拟地址，十六进制表示*/ int main(int argc, char *argv[]) { printf(&amp;quot;location of code : %p\n&amp;quot;, (void *) main); // main函数开始地址 printf(&amp;quot;location of heap : %p\n&amp;quot;, (void *) malloc(1)); int x = 3; printf(&amp;quot;location of stack : %p\n&amp;quot;, (void *) &amp;amp;x); return x; } /* 大致结果： location of code : 0x4005d6 location of heap : 0xcc1420 location of stack : 0x7ffde8e29124 */ 分配和管理内存 操作系统提供了一些api来给用户管理内存 1.</description>
    </item>
    <item>
      <title>【操作系统】2.调度scheduling</title>
      <link>https://blog.gzhh.tech/posts/operating-system-2.scheduling/</link>
      <pubDate>Wed, 27 Feb 2019 16:37:33 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/operating-system-2.scheduling/</guid>
      <description>调度的前提：限制 为了虚拟化 CPU，操作系统需要将物理 CPU 分享给正在运行的作业，即进程。虚拟化的基础思想是：运行一个进程一会儿，然后再运行另一个，一直下去，按时间来分享 CPU。 然而建立虚拟机有两个难题：性能和控制性，虚拟机的可控性非常重要，他可以让进程在系统中稳定的运行，不会崩溃，所以就有了一个技术: Limited Direct Execution(限制直接执行)。 如果不做限制，一般是当操作系统想运行某个程序的时候，系统就会在进程表里面创建一条记录，然后分配内存给程序，并把程序代码加载到内存里面去，然后开始运行程序代码。 Limited Direct Execution 是说当操作系统想让一个程序运行的时候，不直接让它做上面的操作，需要避免危险操作。&#xA;所以下面我们有两个需要注意的：&#xA;1.严格操作 Restricted Operations 系统会给一些危险的操作设置模式，用来保护系统，例如文件系统的读写权限模式。 2.上下文切换 Switching Between Processes 上下文切换即可以理解为进程间的切换，上下文切换需要一定的策略，可以根据进程的优先级来判断，切换时会消耗一定的资源。 切换有两种方式： 合作方式：由进程等等系统调用 操作系统有依据的信任进程。 非合作方式：由操作系统控制 操作系统完全控制着进程的停止和开始。 调度介绍 操作系统在执行多个作业的时候，总是需要在各个作业之间切换，调度就是用来实现这个的。&#xA;调度有许多种思想，叫做调度策略，大致有如下几种：&#xA;1.先来先服务 First In, First Out (FIFO) 或 First Come, First Served (FCFS) 2.短作业优先 Shortest Job First (SJF) 3.抢占式短作业优先 Shortest Time-to-Completion First (STCF) 4.轮循 Round Robin 5.多级反馈队列 Multi-level Feedback Queue (MLFQ) 有一些指标可以用来衡量调度策略的优劣&#xA;1.周转时间 turnaround time T_turnaround = T_completion − T_arrival 周转时间 = 完成的时间点 - 开始的时间点 2.</description>
    </item>
    <item>
      <title>【操作系统】1.进程process</title>
      <link>https://blog.gzhh.tech/posts/operating-system-1.process/</link>
      <pubDate>Mon, 25 Feb 2019 23:00:39 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/operating-system-1.process/</guid>
      <description>介绍 什么是进程：简单来说就是一个正在运行中的程序 进程是程序的一次执行，包括代码和数据，是CPU分配资源的基本单位，一个进程可以包括多个线程。&#xA;进程之间通信方式：管道、SOCKET、信号量（互斥、同步）等。&#xA;子进程是父进程的复制品。子进程获得父进程数据空间、堆和栈的复制品。&#xA;线程是独立运行和独立调度的基本单位（线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更 高效的提高系统内多个程序间并发执行的程度），线程之间共享进程的数据空间（借此通信）&#xA;进程接口 操作系统提供一些 API 给进程调用，例如 create 创建, destroy 销毁, wait 等, suspend 暂停, status 状态等。&#xA;1.fork()&#xA;fork函数复制了当前进程，生成子进程，子进程与父进程不完全相同，子进程有自己的资源，例如：address space (private memory), registers, PC。&#xA;子进程不会从 main 函数开始运行，只会从调用 fork 函数处开始运行。&#xA;fork调用的一个奇妙之处就是它仅仅被调用一次，却能够返回两次，它可能有三种不同的返回值：&#xA;1）在父进程中，fork返回新创建子进程的进程ID；&#xA;2）在子进程中，fork返回0；&#xA;3）如果出现错误，fork返回一个负值；&#xA;#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; int main(int argc, char *argv[]) { printf(&amp;quot;hello (pid:%d)\n&amp;quot;, (int) getpid()); int rc = fork(); if (rc &amp;lt; 0) { // fork failed, exit fprintf(stderr, &amp;quot;fork failed\n&amp;quot;); exit(1); } else if (rc == 0) { // child (new process) printf(&amp;quot;hello, i am child (pid:%d)\n&amp;quot;, (int) getpid()); } else { // parent goes down this path (main) printf(&amp;quot;hello, i am parent of %d (pid:%d)\n&amp;quot;, rc, (int) getpid()); } return 0; } /* 复制了当前进程的备份，称为子进程，子进程一般在父进程执行完后再执行，子进程不会从 main 函数开始 执行，而是从 fork 函数开始执行 大致结果： hello (pid:10642) hello, i am parent of 10643 (pid:10642) hello, i am child (pid:10643) */ 2.</description>
    </item>
    <item>
      <title>【操作系统】基础概念介绍</title>
      <link>https://blog.gzhh.tech/posts/operating-system-0.basic-info/</link>
      <pubDate>Sat, 23 Feb 2019 09:43:53 +0800</pubDate>
      <guid>https://blog.gzhh.tech/posts/operating-system-0.basic-info/</guid>
      <description>进程：正在运行的程序&#xA;线程：是操作系统能够进行运算调度的最小单位，他被包含在进程中，是进程中的实际运作单位。（抢占式、可并发、 OS 控制）&#xA;协程：协程是一种程序组件、协程更为一般和灵活（非抢占式、模拟并发、用户控制）&#xA;并行：多个进程同时工作&#xA;并发：多个进程不同时工作</description>
    </item>
  </channel>
</rss>
